Basic Tabular Data Manipulation	
========================================================
author: Alejandro Schuler, adapted from Steve Bagley and based on R for Data Science by Hadley Wickham, updated to include GTEx sample data by Nicole Ferraro
date: 2022
transition: none
width: 1680
height: 1050

- filter rows of a dataset based on conditions
- arrange rows of a dataset based on one or more columns
- select columns of a dataset
- mutate existing columns to create new columns
- use the pipe to combine multiple operations

```{r include=FALSE}
## better font size for slides
library(tidyverse)
library(knitr)

hook_output_default <- knitr::knit_hooks$get('output')

truncate_to_lines <- function(x, n) {
   if (!is.null(n)) {
      x = unlist(stringr::str_split(x, '\n'))
      if (length(x) > n) {
         # truncate the output
         x = c(head(x, n), '...\n')
      }
      x = paste(x, collapse = '\n') # paste first n lines together
   }
   x
}

# save the built-in output hook
knitr::knit_hooks$set(output = function(x, options) {
   max.lines <- options$max.lines
   x <- truncate_to_lines(x, max.lines)

   hook_output_default(x, options)
})
#theme_set(theme_grey(base_size = 22))
opts_chunk$set(collapse=TRUE,tidy=TRUE,prompt=FALSE,comment=NA,cache=FALSE)
opts_chunk$set(error=TRUE,warning=TRUE,message=TRUE)
```

<style>
.small-code pre code {
  font-size: 0.5em;
}
</style>



dplyr
========================================================
This section shows the basic data frame functions ("verbs") in the `dplyr` package (part of `tidyverse`).

<div align="center">
  <img src="https://d33wubrfki0l68.cloudfront.net/621a9c8c5d7b47c4b6d72e8f01f28d14310e8370/193fc/css/images/hex/dplyr.png"; style="max-width:500px;"; class="center">
</div>

dplyr verbs
========================================================
Each operation takes a data frame and produces a new data frame.

- `filter()` picks out rows according to specified conditions
- `select()` picks out columns according to their names
- `arrange()` sorts the row by values in some column(s)
- `mutate()` creates new columns, often based on operations on other columns
- `summarize()` collapses many values in one or more columns down to one value per column

These can all be used in conjunction with `group_by()` which changes the scope of each function from operating on the entire dataset to operating on it group-by-group. These six functions provide the "verbs" for a language of data manipulation.

All work similarly:

1. The first argument is a data frame.
2. The subsequent arguments describe what to do with the data frame, using the variable names (without quotes).
3. The result is a new data frame.

Together these properties make it easy to chain together multiple simple steps to achieve a complex result. 

GTEx data
===
This is a subset of the Genotype Tissue Expression (GTEx) dataset

- **The full dataset.** Includes gene expression data, measured via RNA-sequencing, from 54 post-mortem tissues in ~800 individuals. Whole genome sequencing is also available for these individuals as part of the GTEx v8 release, available through dbGaP. 
- **The subsetted dataset.** We are looking at expression data for just 78 individuals here, in four tissues including blood, heart, lung and liver. 
- **Data processing** The expression values have been normalized and corrected for technical covariates and are now in the form of Z-scores, which indicate the distance of a given expression value from the mean across all measurements of that gene in that tissue. 
- **Goal.** We will use the data here to illustrate different functions for data transformation, often focused on extracting individuals with extremely high or low expression values for a given gene as compared to the distribution across all samples.


**NOTE**: If copying the code, make sure there are no spaces in the download link (where it wraps to a new line).
```{r, message=F}
# Read subsetted data from online file - make sure there are no spaces
gtex = read_tsv('https://tinyurl.com/mwrvahjz')

# Check number of rows
nrow(gtex)
```

Filter rows with filter()
====
type: section

Filter rows with filter()
========================================================
- `filter()` lets you filter out rows of a dataset that meet a certain condition
- It takes two arguments: the dataset and the condition

```{r, message=F}
filter(gtex, Blood >= 12)
```

Comparison operators
=========================================================
- `==` and `!=` test for equality and inequality (do not use `=` for equality)
- `>` and `<` test for greater-than and less-than
- `>=` and `<=` are greater-than-or-equal and less-than-or-equal
- these can also be used directly on vectors outside of data frames
```{r}
c(1,5,-22,4) > 0
```

Aside: computers are not perfect, so be careful with checking equality
===
```{r}
sqrt(2) ^ 2 == 2
1 / 49 * 49 == 1
```

You can use `near()` to check that two numbers are the same (up to "machine precision")
```{r}
near(sqrt(2) ^ 2,  2)
near(1 / 49 * 49, 1)
```

Comparing to NA
===
- The other "gotcha" is that  `==`  cannot be used to compare to `NA`:
```{r}
x = NA
x == NA
```
- The result actually makes sense though, because I'm asking if "I don't know" is the same as "I don't know". Since either side could be any value, the right answer is "I don't know".
- To check if something is `NA`, use `is.na()`
```{r}
x = NA
is.na(x)
```

Filtering on
========================================================
- the condition can contain computed values

```{r, message=F}
filter(gtex, exp(Blood) > 1)
```
- note that we didn't actually do anything to the values in the blood column


Filtering out all rows
=========================================================
```{r}
filter(gtex, NTissues > 5)
```
- If you ever get a data frame of length zero, it's because no rows satisfy the condition you asked for


Exercise
========================================================
type:prompt

- What is the result of running this code?

```{r}
nrow(gtex)
```

```{r, eval=F}
filter(gtex, NTissues == 2)
filter(gtex, Heart <= -5)
nrow(gtex)
```

Exercise
========================================================
type:prompt

- What is the result of running this code?

```{r}
nrow(gtex)
```

```{r, eval=F}
filter(gtex, NTissues <= 2)
filter(gtex, Heart <= -5)
nrow(gtex)
```

- Remember, functions usually do not change their arguments!

```{r}
low_expression_blood = filter(gtex, Blood <= -5)
low_expression_blood_heart = filter(low_expression_blood, Heart <= -5)
nrow(low_expression_blood_heart)
```

Exercise
========================================================
type:prompt

- Without using the internet, think of how you can use `filter` to create a dataset
where blood expression is positive (>0) **and** heart expression is negative (<0)

- Using any resources you like, figure out how to use `filter` to create a dataset
where **either** blood expression is positive (>0) **or** heart expression is negative (<0)

Logical conjunctions (AND)
========================================================
```{r}
filter(gtex, Blood <= -5 & Heart <= -5)
```
- This filters by the **conjunction** of the two constraints---both must be satisfied.
- The ampersand sign ` & ` stands for "AND"

```{r}
filter(gtex, Blood <= -5, Heart <= -5)
```
- For filter, you can do "AND" by passing in two separate conditions as two different arguments, but the comma and ampersand are not generally interchangeable

Logical conjunctions (OR)
=========================================================
```{r}
filter(gtex, Gene == "A2ML1" | Gene == "A4GALT")
```
- The pipe sign ` | ` stands for "OR" 
- Multiple conjunctions can describe complex logical conditions

Logical conjunctions (OR)
=========================================================
```{r}
filter(gtex, NTissues %in% c(1,2)) # equivalent to filter(gtex, NTissues==1 | NTissues==2)
```
- ` %in% ` returns true for all elements of the thing on the left that are also elements of the thing on the right. This is actually shorthand for a match function (use `help('%in%')` to learn more)

Logical conjunctions (NOT)
=========================================================
```{r}
filter(gtex, !(Gene=="A2ML1"))
```
- The exclamation point ` ! ` means "NOT", which negates the logical condition
- sometimes it's easier to say what you *don't* want!

Exercise: conjunctions
==========================================================
type: prompt

- Filter the GTEX data to keep just the rows corresponding to all genes except CTLA4 and CTDP1 where blood expression is positive.

Exercise: computed conditions
==========================================================
type: prompt

- Filter the GTEX data to keep just the rows where the product of Blood and Heart expression is between 0 and 1.

Exercise: getting rid of NAs
==========================================================
type: prompt

- Filter out any rows where the value for `Heart` is missing (value is `NA`) 

Exercise: getting rid of NAs
==========================================================
type: prompt

- Filter out any rows where the value for `Heart` is missing (value is `NA`) 

```{r}
filter(gtex, !is.na(Heart))
```


Sampling rows
==========================================================
- You can use `slice_sample()` to get `n` randomly selected rows if you don't have a particular condition you would like to filter on.

```{r}
slice_sample(gtex, n=5)
```

- the named argument `prop` allows you to sample a proportion of rows
- Do `?slice_sample()` to see how you can sample with replacement or with weights

Filtering by row number
==========================================================

- Use `row_number()` to filter specific rows. This is more useful once you have sorted the data in a particular order, which we will soon see how to do.

```{r}
filter(gtex, row_number()<=3)
```

Sort rows by a column with arrange()
===
type:section

Arrange rows with arrange()
===========================================================
- `arrange()` takes a data frame and a column, and sorts the rows by the values in that column (ascending order).
- Again, the first argument is the data frame and the other arguments tell the function what to do with it
```{r}
arrange(gtex, Blood)
```

Arrange can sort by more than one column
===========================================================
- This is useful if there is a tie in sorting by the first column.

```{r}
arrange(gtex, NTissues, Blood)
```


Use the desc function to arrange by descending values
===========================================================

```{r}
arrange(gtex, desc(Blood))
```

Exercise: top 5 high expression instances
===========================================================
type:prompt

Use `arrange()` and `filter()` to get the data for the 5 rows with the highest expression values in blood

Exercise: top 5 high expression instances
===========================================================
type:prompt

Use `arrange()` and `filter()` to get the data for the 5 rows with the highest expression values in blood

```{r}
filter(arrange(gtex, desc(Blood)), row_number()<=5) # "nesting" the calls to filter and arrange
```
or
```{r}
gtex_by_blood = arrange(gtex, desc(Blood)) # using a temporary variable
filter(gtex_by_blood, row_number()<=5)
```

- what happens if we reverse the order in which we did `filter` and `arrange`? Does it still work?

Select columns with select()
===
type:section

Select columns with select()
=========================================================
```{r}
select(gtex, Gene, Ind, Blood)
```
- The select function will return a subset of the tibble, using only the requested columns in the order specified.

Select columns with select()
=========================================================
- `select()` can also be used with handy helpers like `starts_with()` and `contains()`

```{r}
select(gtex, starts_with("L"))
```
- Use `?select` to see all the possibilities

***

```{r}
select(gtex, contains("N"))
```
- The quotes around the letter `"N"` make it a string. If we did not do this, `R` would think it was looking for a variable called `N` and not just the plain letter.
- We don't have to quote the names of columns (like `Ind`) because the `tidyverse` functions know that we are working within the dataframe and thus treat the column names like they are variables in their own right

select() subsets columns by name
=========================================================
- `select()` can also be used to select everything **except for** certain columns
```{r}
select(gtex, -starts_with("L"), -Ind)
```

***

- or even to select only columns that match a certain condition

```{r}
select(gtex, where(is.numeric))
```

Exercise: select and filter
===
type:prompt

- Create a one-column dataframe of the heart expression Z-scores (`Heart`) of all individuals with data present (i.e. not `NA`) for gene WDR34 (`Gene`) in the `gtex` dataset.

Exercise: select text columns
===
type:prompt

- Use select to subset the `gtex` dataframe to just those columns that contain text data. 
- Can you do this programmatically without specifying the names of each of the desired columns? 
- Which base R function will help you determine if a column is textual or not? Use whatever tools you want to find out.

pull() is a friend of select()
=========================================================
- `select()` has a friend called `pull()` which returns a vector instead of a (one-column) data frame
```{r}
select(gtex, Gene)
```

```{r max.lines = 5}
pull(gtex, Gene)
```


Rename column names with rename()
=========================================================
- `select()` can be used to rename variables, but it drops all variables not selected
```{r max.lines = 6}
select(gtex, number_tissues = NTissues)
```

- `rename()` is better suited for this because it keeps all the columns
```{r max.lines = 6}
rename(gtex, number_tissues = NTissues)
```

Note: `mutate()`, can also change a column name (more on `mutate()` soon)


Add new variables with mutate()
===
type:section

Add new variables with mutate()
================================================================
```{r, max.lines = 5}
mutate(gtex, abs_blood = abs(Blood))
```
- This uses `mutate()` to add a new column to which is the absolute value of `Blood`.
- The thing on the left of the `=` is a new name that you make up which you would like the new column to be called
- The expresssion on the right of the `=` defines what will go into the new column
- **Warning!** If the new variable name already exists, `mutate()` will overwrite the existing one
```{r, max.lines = 5}
mutate(gtex, Blood = Blood *1000)
```

mutate() can create multiple new columns at once
================================================================
- `mutate()` can create multiple columns at the same time and use multiple columns to define a single new one

```{r, tidy=F}
mutate(gtex, # the newlines make it more readable
      abs_blood = abs(Blood),
      abs_heart = abs(Heart),
      blood_heart_dif = abs_blood - abs_heart
)
```
- Note that we have also used two columns simultaneously (`Blood` and `Heart`) to create a new column)

mutate() for data type conversion
===
- Data is sometimes given to you in a form that makes it difficult to do operations on
```{r}
df = tibble(number = c("1", "2", "3"))
df
mutate(df, number_plus_1 = number + 1)
```

- `mutate()` is also useful for converting data types, in this case text to numbers
```{r}
mutate(df, number = as.numeric(number))
```

Exercise: mutate()
===
type:prompt

I want to see if certain genes are generally more highly expressed in certain individuals, irrespective of tissue type. Using the GTEX data, create a new column containing the average of the four expression measurements in the different tissues.


Exercise: mutate() and ggplot
===
type:prompt

Filter `gtex` to only include measurements of the MYL1 gene. Then, use mutate to mark which gene-individual pairs have outlier MYL1 expression in blood, defined as Z > 3 or Z < -3. Then, produce a plot showing blood Z-scores vs heart Z-scores and color the blood gene expression outliers in a different color than the other points.

```{r, echo=F, fig.width=15}
gene_data = filter(gtex, Gene == 'MYL1')
blood_outliers = mutate(gene_data, blood_outlier = abs(Blood)>3)
ggplot(blood_outliers) +
  geom_point(aes(x=Blood, y=Heart, color=blood_outlier),
             size = 3) +
  theme(axis.text = element_text(size = 15),
        axis.title = element_text(size = 20),
        legend.text = element_text(size = 20),
        legend.title = element_text(size = 20))
```


Exercise: putting it together
===
type:prompt

Produce a vector containing the ten individual IDs (`Ind`) with the biggest absolute difference in their heart and lung expression for the A2ML1 gene.

Before writing any code, break the problem down conceptually into steps. Do you have to create new columns? Filter the rows of a dataset? Arrange rows? Select certain columns? In what order? Once you have a plan, write code, one step at a time.


Piping
===
type:section

Why pipe?
===

- In our last exercise, we used a number of different function applications to arrive at our answer. Shown below, we used temporary variables to keep our code clean. 

```{r, eval=F, tidy=F}
gtex_A2ML1 = filter(gtex, Gene=="A2ML1")
gtex_diff = mutate(gtex_A2ML1, diff = abs(Heart-Lung))
gtex_sort = arrange(gtex_diff, desc(diff))
gtex_top = filter(gtex_sort, row_number()<=10)
pull(gtex_top, Ind)
```

- Compare that to the same code using nested calls (instead of storing in temporary variables):

```{r, eval=F, tidy=F}
pull(
  filter(
    arrange(
      mutate(
        filter(
          gtex, Gene=="A2ML1"),
        diff = abs(Heart-Lung)),
      desc(diff)),
    row_number()<=10),
  Ind
)
```

- What makes either of these hard to read or understand?

The pipe operator
===

- Tidyverse solves these problems with the pipe operator `%>%`

```{r, eval=F, tidy=F}
gtex %>% 
    filter(Gene == 'A2ML1') %>%
    mutate(diff = abs(Heart-Lung)) %>%
    arrange(desc(diff)) %>%
    filter(row_number() <= 10) %>%
    pull(Ind)
```


The pipe operator
===

- Tidyverse solves these problems with the pipe operator `%>%`

```{r, eval=F, tidy=F}
gtex %>% 
    filter(Gene == 'A2ML1') %>%
    mutate(diff = abs(Heart-Lung)) %>%
    arrange(desc(diff)) %>%
    filter(row_number() <= 10) %>%
    pull(Ind)
```

- How does this compare with our code before? What do you notice?

```{r, eval=F, tidy=F}
gtex_A2ML1 = filter(gtex, Gene=="A2ML1")
gtex_diff = mutate(gtex_A2ML1, diff = abs(Heart-Lung))
gtex_sort = arrange(gtex_diff, desc(diff))
gtex_top = filter(gtex_sort, row_number()<=10)
pull(gtex_top, Ind)
```


Pipe details: What happens to an object when it gets "piped in"?
=================================================================

When `df1` is piped into `fun(x)` (`fun` is just some fake function)

```{r eval=FALSE}
df1 %>% fun(x)
```

is converted into:

```{r eval=FALSE}
fun(df1, x)
```

- That is: the thing being piped in is used as the _first_ argument of `fun`.
- The tidyverse functions are consistently designed so that the first argument is a data frame, and the result is a data frame, so you can push a dataframe all the way through a series of functions

Pipe details: What objects can be piped?
=================================================================
- The pipe works for all variables and functions (not just tidyverse functions)

Piping with a vector

```{r}
c(1,44,21,0,-4) %>%
    sum() # instead of sum(c(1,44,21,0,-4))
```

Piping with a scalar

```{r}
1 %>% `+`(1) # `+` is just a function that takes two arguments!
```

Piping with a data frame

```{r}
tibble(
  name = c("Petunia", "Rose", "Daisy", "Marigold", "Arabidopsis"),
  age = c(10,54,21,99,96)
) %>%
filter(age > 30) 
```

Exercise: Pipe to ggplot
===
type:prompt

- Run this code to see what it does. Then rewrite it using the pipe operator and get it to produce the same output.

```{r, eval=F, tidy=F}
gene_data = filter(gtex, Gene == 'MYBL2')
outliers = mutate(gene_data, blood_outlier = abs(Blood) > 2)
ggplot(outliers) +
  geom_bar(aes(x=blood_outlier)) +
  scale_x_discrete("Class", labels=c("Other", "Outlier")) +
  ggtitle("How many individuals have outlier MYBL2 expression in blood?")
```

============================================================
<div align="center">
<img src="https://miro.medium.com/max/1200/1*O4LZwd_rTEGY2zMyDkvR9A.png"; style="max-width:1500;"; class="center">
</div>

Source: [Rstudio Cheat Sheets](https://www.google.com/search?client=safari&rls=en&q=data+transformation+with+dplyr+cheat+sheet&ie=UTF-8&oe=UTF-8). Download the [full dplyr cheat sheet here.](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwiP_KO4m9_xAhVYOs0KHfRUCfgQFnoECAQQAA&url=https%3A%2F%2Fraw.githubusercontent.com%2Frstudio%2Fcheatsheets%2Fmaster%2Fdata-transformation.pdf&usg=AOvVaw3vYk678LtmDz7gbHCvDeM0)
<!-- ^^  COMPLETE   ^^ -->
